import React, { useState, useMemo } from 'react';
import { Expense, ExpenseListProps } from '../../../types';
import ConfirmModal from '../../ui/ConfirmModal/ConfirmModal';

const ExpenseList: React.FC<ExpenseListProps> = ({
  expenses,
  stats,
  onEditExpense,
  onDeleteExpense,
  onRefresh
}) => {
  const [expenseToDelete, setExpenseToDelete] = useState<Expense | null>(null);
  const [isConfirmModalOpen, setIsConfirmModalOpen] = useState(false);

  // –†–∞—Å—á–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ä–∞—Å—Ö–æ–¥–∞ —Ç–æ–ø–ª–∏–≤–∞
  const fuelStats = useMemo(() => {
    const fuelExpenses = expenses.filter(expense => 
      expense.category === 'fuel' && expense.fuelData
    );

    if (fuelExpenses.length === 0) {
      return {
        overallConsumption: 0,
        totalFuelExpenses: 0
      };
    }

    // –û–±—â–∏–π —Å—Ä–µ–¥–Ω–∏–π —Ä–∞—Å—Ö–æ–¥ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –¥–∞–Ω–Ω—ã—Ö –æ –∑–∞–ø–∞—Å–µ —Ö–æ–¥–∞
    const totalLiters = fuelExpenses.reduce((sum, expense) => 
      sum + (expense.fuelData?.liters || 0), 0
    );

    const odometerValues = fuelExpenses
      .map(expense => expense.odometer)
      .filter((odometer): odometer is number => odometer !== undefined)
      .sort((a, b) => a - b);

    const totalDistance = odometerValues.length >= 2 
      ? odometerValues[odometerValues.length - 1] - odometerValues[0]
      : 0;

    const overallConsumption = totalDistance > 0 && totalLiters > 0
      ? (totalLiters / totalDistance) * 100
      : 0;

    return {
      overallConsumption,
      totalFuelExpenses: fuelExpenses.length
    };
  }, [expenses]);

  const handleDeleteClick = (expense: Expense, e: React.MouseEvent) => {
    e.stopPropagation();
    setExpenseToDelete(expense);
    setIsConfirmModalOpen(true);
  };

  const handleConfirmDelete = () => {
    if (expenseToDelete) {
      onDeleteExpense(expenseToDelete);
      setExpenseToDelete(null);
    }
    setIsConfirmModalOpen(false);
  };

  const handleCancelDelete = () => {
    setExpenseToDelete(null);
    setIsConfirmModalOpen(false);
  };

  const formatDate = (dateString: string): string => {
    return new Date(dateString).toLocaleDateString('ru-RU');
  };

  const formatAmount = (amount: number): string => {
    return new Intl.NumberFormat('ru-RU', {
      minimumFractionDigits: 0,
      maximumFractionDigits: 0
    }).format(amount) + ' ‚ÇΩ';
  };

  const formatNumber = (num: number): string => {
    return num.toLocaleString('ru-RU');
  };

  const formatConsumption = (consumption: number): string => {
    return consumption > 0 ? consumption.toFixed(1) + ' –ª/100–∫–º' : '0 –ª/100–∫–º';
  };

  // –†–∞—Å—á–µ—Ç —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—è—Ü–∞
  const currentMonthTotal = useMemo(() => {
    const now = new Date();
    const currentMonthStart = new Date(now.getFullYear(), now.getMonth(), 1);
    
    return expenses
      .filter(expense => new Date(expense.date) >= currentMonthStart)
      .reduce((sum, expense) => sum + expense.amount, 0);
  }, [expenses]);

  const hasFuelExpenses = fuelStats.totalFuelExpenses > 0;

  return (
    <div className="expense-list-container">
      {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
      {stats && (
        <div className="expense-stats">
          <div className="expense-stats__grid">
            {/* üëá –ö–ê–†–¢–û–ß–ö–ê –°–†–ï–î–ù–ï–ì–û –†–ê–°–•–û–î–ê - –í–°–Ø –®–ò–†–ò–ù–ê */}
            <div className="expense-stat-card expense-stat-card--fuel">
              <div className="expense-stat-card__title">–°—Ä–µ–¥–Ω–∏–π —Ä–∞—Å—Ö–æ–¥ —Ç–æ–ø–ª–∏–≤–∞</div>
              <div className="expense-stat-card__consumption-single">
                <span className="expense-stat-card__consumption-value">
                  {formatConsumption(fuelStats.overallConsumption)}
                </span>
              </div>
              {hasFuelExpenses && (
                <div className="expense-stat-card__fuel-meta">
                  –ù–∞ –æ—Å–Ω–æ–≤–µ {fuelStats.totalFuelExpenses} –∑–∞–ø—Ä–∞–≤–æ–∫
                </div>
              )}
            </div>

            {/* üëá –ö–ê–†–¢–û–ß–ö–ê –í–°–ï–ì–û –†–ê–°–•–û–î–û–í - –í–°–Ø –®–ò–†–ò–ù–ê */}
            <div className="expense-stat-card expense-stat-card--full-width">
              <div className="expense-stat-card__value">{formatAmount(stats.total)}</div>
              <div className="expense-stat-card__label">–í—Å–µ–≥–æ —Ä–∞—Å—Ö–æ–¥–æ–≤</div>
            </div>

            {/* üëá –î–í–ï –ö–ê–†–¢–û–ß–ö–ò –í –û–î–ù–û–ô –°–¢–†–û–ö–ï - –û–ë–ï–†–¢–ö–ê –î–õ–Ø –ú–û–ë–ò–õ–¨–ù–´–• */}
            <div className="expense-stats__row">
              <div className="expense-stat-card">
                <div className="expense-stat-card__value">{formatAmount(currentMonthTotal)}</div>
                <div className="expense-stat-card__label">–í —Ç–µ–∫—É—â–µ–º –º–µ—Å—è—Ü–µ</div>
              </div>
              <div className="expense-stat-card">
                <div className="expense-stat-card__value">{formatAmount(stats.lastMonthTotal)}</div>
                <div className="expense-stat-card__label">–ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü</div>
              </div>
            </div>
          </div>
        </div>
      )}

      {/* –û—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π */}
      <div className="expense-list">
        {expenses.map((expense, index) => (
          <div 
            key={expense.id}
            className="expense-card"
            style={{ animationDelay: `${index * 0.05}s` }}
          >
            <div className="expense-card__header">
              <h3 className="expense-card__title">{expense.description}</h3>
              <span className="expense-card__amount">{formatAmount(expense.amount)}</span>
            </div>
            
            <div className="expense-card__meta">
              <span className={`expense-card__category expense-card__category--${expense.category}`}>
                {getCategoryName(expense.category)}
              </span>
              <span className="expense-card__date">{formatDate(expense.date)}</span>
              {expense.odometer && (
                <span className="expense-card__odometer">{formatNumber(expense.odometer)} –∫–º</span>
              )}
            </div>

            <div className="expense-card__details">
              <div className="expense-card__detail">
                <span className="expense-card__detail-label">–ö–∞—Ç–µ–≥–æ—Ä–∏—è</span>
                <span className="expense-card__detail-value">{getCategoryName(expense.category)}</span>
              </div>
              <div className="expense-card__detail">
                <span className="expense-card__detail-label">–î–∞—Ç–∞</span>
                <span className="expense-card__detail-value">{formatDate(expense.date)}</span>
              </div>
              {expense.odometer && (
                <div className="expense-card__detail">
                  <span className="expense-card__detail-label">–ü—Ä–æ–±–µ–≥</span>
                  <span className="expense-card__detail-value">{formatNumber(expense.odometer)} –∫–º</span>
                </div>
              )}
              
              {expense.category === 'fuel' && expense.fuelData && (
                <>
                  {expense.fuelData.liters && (
                    <div className="expense-card__detail">
                      <span className="expense-card__detail-label">–ó–∞–ø—Ä–∞–≤–ª–µ–Ω–æ</span>
                      <span className="expense-card__detail-value">
                        {expense.fuelData.liters} –ª
                      </span>
                    </div>
                  )}
                  {expense.fuelData.remainingRange && (
                    <div className="expense-card__detail">
                      <span className="expense-card__detail-label">–ó–∞–ø–∞—Å —Ö–æ–¥–∞</span>
                      <span className="expense-card__detail-value">{expense.fuelData.remainingRange} –∫–º</span>
                    </div>
                  )}
                  {expense.fuelData.averageConsumption && (
                    <div className="expense-card__detail">
                      <span className="expense-card__detail-label">–†–∞—Å—Ö–æ–¥</span>
                      <span className="expense-card__detail-value">{expense.fuelData.averageConsumption.toFixed(1)} –ª/100–∫–º</span>
                    </div>
                  )}
                </>
              )}
            </div>
            
            <div className="expense-card__actions">
              <button 
                className="btn btn--secondary btn--sm"
                onClick={() => onEditExpense(expense)}
              >
                –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
              </button>
              <button 
                className="btn btn--danger btn--sm"
                onClick={(e) => handleDeleteClick(expense, e)}
              >
                –£–¥–∞–ª–∏—Ç—å
              </button>
            </div>
          </div>
        ))}
      </div>

      <ConfirmModal
        isOpen={isConfirmModalOpen}
        onClose={handleCancelDelete}
        onConfirm={handleConfirmDelete}
        title="–£–¥–∞–ª–∏—Ç—å —Ä–∞—Å—Ö–æ–¥"
        message={expenseToDelete ? `–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Ä–∞—Å—Ö–æ–¥ "${expenseToDelete.description}" –Ω–∞ —Å—É–º–º—É ${formatAmount(expenseToDelete.amount)}?` : "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç —Ä–∞—Å—Ö–æ–¥?"}
        confirmText="–£–¥–∞–ª–∏—Ç—å"
        cancelText="–û—Ç–º–µ–Ω–∞"
        type="delete"
      />
    </div>
  );
};

const getCategoryName = (category: string): string => {
  const names: { [key: string]: string } = {
    fuel: '–ó–∞–ø—Ä–∞–≤–∫–∞',
    maintenance: '–¢–µ—Ö–æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ',
    repairs: '–†–µ–º–æ–Ω—Ç',
    parts: '–ó–∞–ø—á–∞—Å—Ç–∏',
    insurance: '–°—Ç—Ä–∞—Ö–æ–≤–∫–∞',
    taxes: '–ù–∞–ª–æ–≥–∏',
    parking: '–ü–∞—Ä–∫–æ–≤–∫–∞',
    washing: '–ú–æ–π–∫–∞',
    fines: '–®—Ç—Ä–∞—Ñ—ã',
    other: '–ü—Ä–æ—á–µ–µ'
  };
  return names[category] || category;
};

export default ExpenseList;