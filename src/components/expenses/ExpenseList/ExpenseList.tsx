import React, { useState } from 'react';
import { Expense, ExpenseListProps } from '../../../types';
import ConfirmModal from '../../ui/ConfirmModal/ConfirmModal';

const ExpenseList: React.FC<ExpenseListProps> = ({
  expenses,
  stats,
  onEditExpense,
  onDeleteExpense,
  onRefresh
}) => {
  const [expenseToDelete, setExpenseToDelete] = useState<Expense | null>(null);
  const [isConfirmModalOpen, setIsConfirmModalOpen] = useState(false);

  const handleDeleteClick = (expense: Expense, e: React.MouseEvent) => {
    e.stopPropagation();
    setExpenseToDelete(expense);
    setIsConfirmModalOpen(true);
  };

  const handleConfirmDelete = () => {
    if (expenseToDelete) {
      onDeleteExpense(expenseToDelete);
      setExpenseToDelete(null);
    }
    setIsConfirmModalOpen(false);
  };

  const handleCancelDelete = () => {
    setExpenseToDelete(null);
    setIsConfirmModalOpen(false);
  };

  const formatDate = (dateString: string): string => {
    return new Date(dateString).toLocaleDateString('ru-RU');
  };

  const formatAmount = (amount: number): string => {
    return new Intl.NumberFormat('ru-RU', {
      minimumFractionDigits: 0,
      maximumFractionDigits: 0
    }).format(amount) + ' ‚ÇΩ';
  };

  const formatNumber = (num: number): string => {
    return num.toLocaleString('ru-RU');
  };

  return (
    <div className="expense-list-container">
      {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
      {stats && (
        <div className="expense-stats">
          <div className="expense-stats__grid">
            <div className="expense-stat-card">
              <div className="expense-stat-card__value">{formatAmount(stats.total)}</div>
              <div className="expense-stat-card__label">–í—Å–µ–≥–æ —Ä–∞—Å—Ö–æ–¥–æ–≤</div>
            </div>
            <div className="expense-stat-card">
              <div className="expense-stat-card__value">{formatAmount(stats.monthlyAverage)}</div>
              <div className="expense-stat-card__label">–í —Å—Ä–µ–¥–Ω–µ–º –≤ –º–µ—Å—è—Ü</div>
            </div>
            <div className="expense-stat-card">
              <div className="expense-stat-card__value">{formatAmount(stats.lastMonthTotal)}</div>
              <div className="expense-stat-card__label">–ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü</div>
            </div>
            <div className="expense-stat-card">
              <div className="expense-stat-card__value">
                {stats.trend === 'up' ? 'üìà' : stats.trend === 'down' ? 'üìâ' : '‚û°Ô∏è'}
              </div>
              <div className="expense-stat-card__label">–¢—Ä–µ–Ω–¥</div>
            </div>
          </div>
        </div>
      )}

      {/* –°–ø–∏—Å–æ–∫ —Ä–∞—Å—Ö–æ–¥–æ–≤ */}
      <div className="expense-list">
        {expenses.map((expense, index) => (
          <div 
            key={expense.id}
            className="expense-card"
            style={{ animationDelay: `${index * 0.05}s` }}
          >
            {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∫–∞—Ä—Ç–æ—á–∫–∏ */}
            <div className="expense-card__header">
              <h3 className="expense-card__title">{expense.description}</h3>
              <span className="expense-card__amount">{formatAmount(expense.amount)}</span>
            </div>
            
            {/* –ú–µ—Ç–∞-–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
            <div className="expense-card__meta">
              <span className={`expense-card__category expense-card__category--${expense.category}`}>
                {getCategoryName(expense.category)}
              </span>
              <span className="expense-card__date">{formatDate(expense.date)}</span>
              {expense.odometer && (
                <span className="expense-card__odometer">{formatNumber(expense.odometer)} –∫–º</span>
              )}
            </div>

            {/* –î–µ—Ç–∞–ª–∏ —Ä–∞—Å—Ö–æ–¥–∞ */}
            <div className="expense-card__details">
              <div className="expense-card__detail">
                <span className="expense-card__detail-label">–ö–∞—Ç–µ–≥–æ—Ä–∏—è</span>
                <span className="expense-card__detail-value">{getCategoryName(expense.category)}</span>
              </div>
              <div className="expense-card__detail">
                <span className="expense-card__detail-label">–î–∞—Ç–∞</span>
                <span className="expense-card__detail-value">{formatDate(expense.date)}</span>
              </div>
              {expense.odometer && (
                <div className="expense-card__detail">
                  <span className="expense-card__detail-label">–ü—Ä–æ–±–µ–≥</span>
                  <span className="expense-card__detail-value">{formatNumber(expense.odometer)} –∫–º</span>
                </div>
              )}
            </div>
            
            {/* –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π */}
            <div className="expense-card__actions">
              <button 
                className="btn btn--secondary btn--sm"
                onClick={() => onEditExpense(expense)}
              >
                –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
              </button>
              <button 
                className="btn btn--danger btn--sm"
                onClick={(e) => handleDeleteClick(expense, e)}
              >
                –£–¥–∞–ª–∏—Ç—å
              </button>
            </div>
          </div>
        ))}
      </div>

      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è */}
      <ConfirmModal
        isOpen={isConfirmModalOpen}
        onClose={handleCancelDelete}
        onConfirm={handleConfirmDelete}
        title="–£–¥–∞–ª–∏—Ç—å —Ä–∞—Å—Ö–æ–¥"
        message={expenseToDelete ? `–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Ä–∞—Å—Ö–æ–¥ "${expenseToDelete.description}" –Ω–∞ —Å—É–º–º—É ${formatAmount(expenseToDelete.amount)}?` : "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç —Ä–∞—Å—Ö–æ–¥?"}
        confirmText="–£–¥–∞–ª–∏—Ç—å"
        cancelText="–û—Ç–º–µ–Ω–∞"
        type="delete"
      />
    </div>
  );
};

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏–π –∫–∞—Ç–µ–≥–æ—Ä–∏–π
const getCategoryName = (category: string): string => {
  const names: { [key: string]: string } = {
    fuel: '–ó–∞–ø—Ä–∞–≤–∫–∞',
    maintenance: '–¢–µ—Ö–æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ',
    repairs: '–†–µ–º–æ–Ω—Ç',
    parts: '–ó–∞–ø—á–∞—Å—Ç–∏',
    insurance: '–°—Ç—Ä–∞—Ö–æ–≤–∫–∞',
    taxes: '–ù–∞–ª–æ–≥–∏',
    parking: '–ü–∞—Ä–∫–æ–≤–∫–∞',
    washing: '–ú–æ–π–∫–∞',
    fines: '–®—Ç—Ä–∞—Ñ—ã',
    other: '–ü—Ä–æ—á–µ–µ'
  };
  return names[category] || category;
};

export default ExpenseList;