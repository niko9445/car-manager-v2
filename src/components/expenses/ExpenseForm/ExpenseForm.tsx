import React, { useState, useEffect } from 'react';
import { useApp } from '../../../contexts/AppContext';
import { Expense, ExpenseCategory } from '../../../types';
import { ExpenseService } from '../../../services/expenseService';
import './ExpenseForm.css';

// –õ–æ–∫–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Ñ–æ—Ä–º—ã
interface ExpenseFormData {
  date: string;
  category: ExpenseCategory;
  amount: number;
  description: string;
  odometer?: number;
}

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –æ—à–∏–±–æ–∫ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ —Ç–∏–ø–∞–º–∏
interface ExpenseFormErrors {
  date?: string;
  category?: string;
  amount?: string;
  description?: string;
  odometer?: string;
}

interface ExpenseFormProps {
  expense?: Expense; // –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω–æ - —Ä–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
  onSave: () => void;
  onCancel: () => void;
}

const ExpenseForm: React.FC<ExpenseFormProps> = ({ 
  expense, 
  onSave, 
  onCancel 
}) => {
  const { state } = useApp();
  const { selectedCar } = state;
  
  const [formData, setFormData] = useState<ExpenseFormData>({
    date: new Date().toISOString().split('T')[0],
    category: 'fuel',
    amount: 0,
    description: '',
    odometer: undefined
  });
  
  const [errors, setErrors] = useState<ExpenseFormErrors>({});
  const [loading, setLoading] = useState(false);

  useEffect(() => {
    if (expense) {
      // –†–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è - –∑–∞–ø–æ–ª–Ω—è–µ–º —Ñ–æ—Ä–º—É –¥–∞–Ω–Ω—ã–º–∏
      setFormData({
        date: expense.date,
        category: expense.category,
        amount: expense.amount,
        description: expense.description,
        odometer: expense.odometer
      });
    }
  }, [expense]);

  const handleInputChange = (
    e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement>
  ) => {
    const { name, value } = e.target;
    
    setFormData(prev => ({
      ...prev,
      [name]: name === 'amount' || name === 'odometer' 
        ? value === '' ? undefined : Number(value)
        : value
    }));
    
    // –û—á–∏—â–∞–µ–º –æ—à–∏–±–∫—É –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø–æ–ª—è
    if (errors[name as keyof ExpenseFormErrors]) {
      setErrors(prev => ({
        ...prev,
        [name]: undefined
      }));
    }
  };

  const validateForm = (): boolean => {
    const newErrors: ExpenseFormErrors = {};

    if (!formData.date) {
      newErrors.date = '–£–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É —Ä–∞—Å—Ö–æ–¥–∞';
    }

    if (!formData.amount || formData.amount <= 0) {
      newErrors.amount = '–£–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É';
    }

    if (!formData.description.trim()) {
      newErrors.description = '–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥–∞';
    }

    if (formData.odometer !== undefined && formData.odometer < 0) {
      newErrors.odometer = '–ü—Ä–æ–±–µ–≥ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º';
    }

    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    if (!validateForm() || !selectedCar) {
      return;
    }

    setLoading(true);

    try {
      if (expense) {
        // –†–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        await ExpenseService.updateExpense(expense.id, {
          ...formData,
          carId: selectedCar.id
        });
      } else {
        // –†–µ–∂–∏–º –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
        await ExpenseService.addExpense({
          ...formData,
          carId: selectedCar.id
        });
      }
      
      onSave();
    } catch (error) {
      console.error('Error saving expense:', error);
      alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ä–∞—Å—Ö–æ–¥–∞');
    } finally {
      setLoading(false);
    }
  };

  const categoryOptions: { value: ExpenseCategory; label: string; icon: string }[] = [
    { value: 'fuel', label: '‚õΩ –ó–∞–ø—Ä–∞–≤–∫–∞', icon: '‚õΩ' },
    { value: 'maintenance', label: 'üîß –¢–µ—Ö–æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ', icon: 'üîß' },
    { value: 'repairs', label: 'üõ†Ô∏è –†–µ–º–æ–Ω—Ç', icon: 'üõ†Ô∏è' },
    { value: 'parts', label: '‚öôÔ∏è –ó–∞–ø—á–∞—Å—Ç–∏', icon: '‚öôÔ∏è' },
    { value: 'insurance', label: 'üõ°Ô∏è –°—Ç—Ä–∞—Ö–æ–≤–∫–∞', icon: 'üõ°Ô∏è' },
    { value: 'taxes', label: 'üìÑ –ù–∞–ª–æ–≥–∏', icon: 'üìÑ' },
    { value: 'parking', label: 'üÖøÔ∏è –ü–∞—Ä–∫–æ–≤–∫–∞', icon: 'üÖøÔ∏è' },
    { value: 'washing', label: 'üßº –ú–æ–π–∫–∞', icon: 'üßº' },
    { value: 'fines', label: 'üö® –®—Ç—Ä–∞—Ñ—ã', icon: 'üö®' },
    { value: 'other', label: 'üí∞ –ü—Ä–æ—á–µ–µ', icon: 'üí∞' }
  ];

  return (
    <form className="form" onSubmit={handleSubmit}>
      <div className="form__fields">
        <div className="form__group">
          <label htmlFor="date" className="form__label form__label--required">
            –î–∞—Ç–∞ —Ä–∞—Å—Ö–æ–¥–∞
          </label>
          <input
            id="date"
            name="date"
            type="date"
            value={formData.date}
            onChange={handleInputChange}
            className={`form__input ${errors.date ? 'form__input--error' : ''}`}
            required
          />
          {errors.date && <span className="form__error">{errors.date}</span>}
        </div>

        <div className="form__group">
          <label htmlFor="category" className="form__label form__label--required">
            –ö–∞—Ç–µ–≥–æ—Ä–∏—è
          </label>
          <select
            id="category"
            name="category"
            value={formData.category}
            onChange={handleInputChange}
            className="form__select"
          >
            {categoryOptions.map(option => (
              <option key={option.value} value={option.value}>
                {option.label}
              </option>
            ))}
          </select>
        </div>

        <div className="form__group">
          <label htmlFor="amount" className="form__label form__label--required">
            –°—É–º–º–∞ (‚ÇΩ)
          </label>
          <input
            id="amount"
            name="amount"
            type="number"
            step="0.01"
            min="0"
            value={formData.amount || ''}
            onChange={handleInputChange}
            className={`form__input ${errors.amount ? 'form__input--error' : ''}`}
            placeholder="0.00"
            required
          />
          {errors.amount && <span className="form__error">{errors.amount}</span>}
        </div>

        <div className="form__group">
          <label htmlFor="odometer" className="form__label">
            –ü—Ä–æ–±–µ–≥ (–∫–º)
          </label>
          <input
            id="odometer"
            name="odometer"
            type="number"
            min="0"
            value={formData.odometer || ''}
            onChange={handleInputChange}
            className={`form__input ${errors.odometer ? 'form__input--error' : ''}`}
            placeholder="–ù–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ"
          />
          {errors.odometer && <span className="form__error">{errors.odometer}</span>}
        </div>

        <div className="form__group">
          <label htmlFor="description" className="form__label form__label--required">
            –û–ø–∏—Å–∞–Ω–∏–µ
          </label>
          <textarea
            id="description"
            name="description"
            value={formData.description}
            onChange={handleInputChange}
            className={`form__textarea ${errors.description ? 'form__textarea--error' : ''}`}
            placeholder="–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥–∞..."
            rows={3}
            required
          />
          {errors.description && <span className="form__error">{errors.description}</span>}
        </div>
      </div>

      <div className="form__actions">
        <button
          type="button"
          className="btn btn--outline"
          onClick={onCancel}
          disabled={loading}
        >
          –û—Ç–º–µ–Ω–∞
        </button>
        <button
          type="submit"
          className="btn btn--primary"
          disabled={loading}
        >
          {loading ? '–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...' : expense ? '–û–±–Ω–æ–≤–∏—Ç—å' : '–î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥'}
        </button>
      </div>
    </form>
  );
};

export default ExpenseForm;